// Script de test de connexion √† Supabase
import { config } from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Charger les variables d'environnement
config();

// Informations de connexion √† Supabase
const supabaseUrl = process.env.SUPABASE_URL || 'https://api.obdexpress.fr';
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Erreur: Variables d\'environnement SUPABASE_URL et/ou SUPABASE_ANON_KEY non d√©finies');
  console.log('Veuillez cr√©er un fichier .env dans le dossier backend avec ces variables');
  process.exit(1);
}

console.log('üîÑ Tentative de connexion √† Supabase...');
console.log(`üåê URL: ${supabaseUrl}`);

// Cr√©ation du client Supabase
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testConnection() {
  try {
    // Test simple: ex√©cuter une requ√™te SQL pour obtenir la version de PostgreSQL
    const { data, error } = await supabase
      .from('_postgrest_migrations')
      .select('*')
      .limit(1);
    
    if (error) {
      // Si cette table sp√©cifique n'existe pas, essayons une requ√™te SQL personnalis√©e
      const { data: sqlData, error: sqlError } = await supabase
        .rpc('get_current_timestamp', {});
      
      if (sqlError) {
        // Si cette RPC n'existe pas non plus, essayons simplement de lister les sch√©mas
        console.log('‚úÖ Connexion √† Supabase √©tablie (authentification r√©ussie)');
        console.log('‚ö†Ô∏è Impossible d\'ex√©cuter les requ√™tes de test, mais l\'authentification fonctionne');
      } else {
        console.log('‚úÖ Connexion √† Supabase r√©ussie!');
        console.log(`üìÖ Date et heure du serveur: ${sqlData}`);
      }
    } else {
      console.log('‚úÖ Connexion √† Supabase r√©ussie!');
      console.log(`üóÉÔ∏è Table syst√®me trouv√©e: _postgrest_migrations`);
    }
    
    // Tester une requ√™te pour lister les tables publiques
    console.log('\nüîÑ V√©rification des tables accessibles...');
    const { data: tablesData, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .limit(10);
    
    if (tablesError) {
      console.log('‚ö†Ô∏è Impossible de lister les tables, mais la connexion fonctionne');
      console.error(tablesError);
    } else {
      console.log('üìã Tables disponibles:');
      tablesData.forEach(table => console.log(` - ${table.tablename}`));
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† Supabase:');
    console.error(error);
    process.exit(1);
  }
}

testConnection();
